{"version":3,"sources":["movingbubbles.js","App.js","serviceWorker.js","index.js"],"names":["MovingBubbles","state","maxBubbles","timer","tick","bubbles","hue","hueRand","saturation","saturationRand","light","lightRand","opacityFactor","minOpacity","ratio","updateBubbles","_this","setState","map","bub","bubble","JSON","parse","stringify","x","diam","window","innerWidth","y","innerHeight","createBubble","time","opacity","xVel","yVel","left","Math","floor","top","renderBubbles","id","react_default","a","createElement","key","style","width","height","backgroundColor","boxShadow","bubbleLength","this","i","bubbleId","push","e","random","hsla","min","max","instantiateBubbles","interval","setInterval","clearInterval","Component","App","Fragment","movingbubbles","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9a418936.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nclass MovingBubbles extends Component {\r\n  state = {\r\n    maxBubbles: 250,\r\n    timer: -1,\r\n    tick: 100,\r\n    bubbles: [],\r\n    hue: 188,\r\n    hueRand: 20,\r\n    saturation: 63,\r\n    saturationRand: 10,\r\n    light: 57,\r\n    lightRand: 10,\r\n    opacityFactor: 3,\r\n    minOpacity: 0.1,\r\n    ratio: 45000\r\n  };\r\n\r\n  instantiateBubbles() {\r\n    let bubbles = [];\r\n\r\n    const bubbleLength = Math.floor(\r\n      (window.innerWidth * window.innerHeight) / this.state.ratio\r\n    );\r\n\r\n    for (let i = 0; i < bubbleLength; i++) {\r\n      const bubbleId = \"bubble\" + i;\r\n      const bubble = this.bubble(bubbleId);\r\n      bubbles.push(this.createBubble(bubble));\r\n    }\r\n    return bubbles;\r\n  }\r\n\r\n  createBubble(e) {\r\n    e.time = 0;\r\n    e.x = Math.random() * window.innerWidth;\r\n    e.y = Math.random() * window.innerHeight;\r\n    e.xVel = Math.random() * 4 - 2;\r\n    e.yVel = Math.random() * 4 - 2;\r\n    e.diam = Math.floor(Math.random() * 160) + 40;\r\n    e.width = e.diam + \"px\";\r\n    e.height = e.diam + \"px\";\r\n    const hue = Math.floor(Math.random() * this.state.hueRand) + this.state.hue;\r\n    const saturation =\r\n      Math.floor(Math.random() * this.state.saturationRand) +\r\n      this.state.saturation;\r\n    const light =\r\n      Math.floor(Math.random() * this.state.lightRand) + this.state.light;\r\n    const opacity = Math.min(\r\n      Math.max(Math.random() / this.state.opacityFactor, this.state.minOpacity),\r\n      1\r\n    );\r\n    const hsla =\r\n      \"hsla(\" + hue + \",\" + saturation + \"%,\" + light + \"%,\" + opacity + \")\";\r\n    e.backgroundColor = hsla;\r\n    e.boxShadow = \"0 0 \" + (Math.floor(Math.random() * 10) + 5) + \"px \" + hsla;\r\n    e.opacity = \"0\";\r\n    return e;\r\n  }\r\n\r\n  bubble(id) {\r\n    return {\r\n      x: 0,\r\n      y: 0,\r\n      xVel: 0,\r\n      yVel: 0,\r\n      time: 0,\r\n      id,\r\n      diam: 0\r\n    };\r\n  }\r\n\r\n  updateBubbles = () => {\r\n    this.setState({\r\n      bubbles: this.state.bubbles.map(bub => {\r\n        let bubble = JSON.parse(JSON.stringify(bub));\r\n        if (\r\n          bubble.x + bubble.diam < 0 ||\r\n          bubble.x > window.innerWidth ||\r\n          bubble.y + bubble.diam < 0 ||\r\n          bubble.y - bubble.diam > window.innerHeight\r\n        ) {\r\n          bubble = this.createBubble(bubble);\r\n        } else {\r\n          if (bubble.time < 11) bubble.opacity = bubble.time / 10;\r\n          bubble.x += bubble.xVel;\r\n          bubble.y += bubble.yVel;\r\n          bubble.left = Math.floor(bubble.x) + \"px\";\r\n          bubble.top = Math.floor(bubble.y) + \"px\";\r\n          bubble.time++;\r\n        }\r\n        return bubble;\r\n      })\r\n    });\r\n  };\r\n\r\n  renderBubbles = () => {\r\n    return this.state.bubbles.map(bubble => {\r\n      const id = bubble.id;\r\n\r\n      return (\r\n        <div\r\n          id={id}\r\n          key={id}\r\n          style={{\r\n            width: bubble.width,\r\n            height: bubble.height,\r\n            backgroundColor: bubble.backgroundColor,\r\n            boxShadow: bubble.boxShadow,\r\n            opacity: bubble.opacity,\r\n            left: bubble.left,\r\n            top: bubble.top\r\n          }}\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ bubbles: this.instantiateBubbles() });\r\n\r\n    this.interval = setInterval(this.updateBubbles, this.state.tick);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  render() {\r\n    return <div id=\"bubbleContainer\">{this.renderBubbles()}</div>;\r\n  }\r\n}\r\n\r\nexport default MovingBubbles;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport MovingBubbles from \"./movingbubbles\";\nimport \"./movingbubbles.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <MovingBubbles />\n        <h1>לבונבון המתוק שלי</h1>\n        <h2>מאחל לך את כול הטוב שבעולם</h2>\n        <h3>שתמיד תחייכי ותיהי מאושרת</h3>\n        <h3>אוהב מפה ועד עין יהב, אילן</h3>\n        <h4>❤❤❤❤❤❤❤</h4>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}